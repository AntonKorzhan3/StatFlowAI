
      var require = await (async () => {
        var { createRequire } = await import("node:module");
        return createRequire(import.meta.url);
      })();
    
import {
  createServerHandler
} from "./esm-chunks/chunk-HESS57SH.js";
import {
  copyPrerenderedContent
} from "./esm-chunks/chunk-MRD3XSKD.js";
import "./esm-chunks/chunk-4BNHE6TP.js";
import {
  copyStaticAssets,
  copyStaticContent,
  copyStaticExport,
  publishStaticDir,
  unpublishStaticDir
} from "./esm-chunks/chunk-V2T6NUOM.js";
import "./esm-chunks/chunk-TYCYFZ22.js";
import {
  wrapTracer
} from "./esm-chunks/chunk-PDPDW32D.js";
import {
  init_esm,
  trace
} from "./esm-chunks/chunk-Y3K5Q6FP.js";
import {
  createEdgeHandlers
} from "./esm-chunks/chunk-UTQSBE5O.js";
import "./esm-chunks/chunk-VZNKO4OO.js";
import {
  restoreBuildCache,
  saveBuildCache
} from "./esm-chunks/chunk-72ZI2IVI.js";
import {
  setImageConfig
} from "./esm-chunks/chunk-MCEOSJH6.js";
import {
  PluginContext
} from "./esm-chunks/chunk-L6OM53B6.js";
import {
  verifyBuildConfig,
  verifyNoAdvancedAPIRoutes,
  verifyPublishDir
} from "./esm-chunks/chunk-K7BTUM7O.js";
import "./esm-chunks/chunk-PJG75HGC.js";
import "./esm-chunks/chunk-BG455SFE.js";
import "./esm-chunks/chunk-UYKENJEU.js";
import "./esm-chunks/chunk-5JVNISGM.js";

// src/index.ts
init_esm();
var tracer = wrapTracer(trace.getTracer("Next.js runtime"));
var onPreBuild = async (options) => {
  await tracer.withActiveSpan("onPreBuild", async () => {
    process.env.NEXT_PRIVATE_STANDALONE = "true";
    if (!options.constants.IS_LOCAL) {
      await restoreBuildCache(new PluginContext(options));
    }
  });
};
var onBuild = async (options) => {
  await tracer.withActiveSpan("onBuild", async (span) => {
    const ctx = new PluginContext(options);
    verifyPublishDir(ctx);
    verifyBuildConfig(ctx);
    span.setAttribute("next.buildConfig", JSON.stringify(ctx.buildConfig));
    if (!options.constants.IS_LOCAL) {
      await saveBuildCache(ctx);
    }
    if (ctx.buildConfig.output === "export") {
      return copyStaticExport(ctx);
    }
    await verifyNoAdvancedAPIRoutes(ctx);
    await Promise.all([
      copyStaticAssets(ctx),
      copyStaticContent(ctx),
      copyPrerenderedContent(ctx),
      createServerHandler(ctx),
      createEdgeHandlers(ctx),
      setImageConfig(ctx)
    ]);
  });
};
var onPostBuild = async (options) => {
  await tracer.withActiveSpan("onPostBuild", async () => {
    await publishStaticDir(new PluginContext(options));
  });
};
var onSuccess = async () => {
  await tracer.withActiveSpan("onSuccess", async () => {
    const prewarm = [process.env.DEPLOY_URL, process.env.DEPLOY_PRIME_URL, process.env.URL].filter(
      // If running locally then the deploy ID is a placeholder value. Filtering for `https://0--` removes it.
      (url) => Boolean(url && !url.startsWith("https://0--"))
    );
    await Promise.allSettled(prewarm.map((url) => fetch(url)));
  });
};
var onEnd = async (options) => {
  await tracer.withActiveSpan("onEnd", async () => {
    await unpublishStaticDir(new PluginContext(options));
  });
};
export {
  onBuild,
  onEnd,
  onPostBuild,
  onPreBuild,
  onSuccess
};
